<header class="header">
    <div class="header__container">
        <!-- Logo -->
        <div class="header__logo">
            <img src="../img/LogoTransp.svg" alt="Logo Empresa" class="logo__img" loading="lazy">
        </div>

        <!-- Navegación Principal -->
        <nav class="header__nav" role="navigation">
            <ul class="nav__list">
                <li class="nav__item">
                    <a href="/protected/admin" class="nav__link">
                        <i class="fas fa-home"></i>
                        <span>Inicio</span>
                    </a>
                </li>
            </ul>
        </nav>

        <!-- Área de Usuario y Notificaciones -->
        <div class="header__user">
            <!-- Notificaciones -->
            <div class="notifications" role="complementary">
                <button class="notifications__btn" id="notifBtn" aria-label="Notificaciones">
                    <i class="fas fa-bell"></i>
                    <span class="notifications__badge" id="notifCount">0</span>
                </button>
                <div class="notifications__dropdown" id="notifDropdown">
                    <div class="notifications__header">
                        <h3>Notificaciones</h3>
                        <!-- <button class="notifications__clear" aria-label="Limpiar notificaciones">
                            Limpiar todo
                        </button> -->
                    </div>
                    <div class="notifications__list" id="notifList"></div>
                </div>
            </div>

            <!-- Perfil Usuario -->
            <div class="user-profile">
                <button class="user-profile__btn" aria-label="Menú de usuario">
                    <span class="user-profile__name">
                        <%= nombre %>
                    </span>
                    <i class="fas fa-chevron-down"></i>
                </button>
                <div class="user-profile__dropdown" id="userDropdown">
                    <a href="/protected/perfil" class="dropdown__link">
                        <i class="fas fa-user"></i>
                        <span>Mi Perfil</span>
                    </a>
                    <a href="/protected/cerrarSesion" class="dropdown__link" id="cerrarSesion">
                        <i class="fas fa-sign-out-alt"></i>
                        <span>Cerrar Sesión</span>
                    </a>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Backdrop para móviles -->
<div class="dropdown-backdrop" id="dropdownBackdrop"></div>
<style>
    /* Variables */
    :root {
        --primary-color: #007bff;
        --text-color: #333;
        --border-color: #e0e0e0;
        --hover-bg: #f8f9fa;
        --shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        --notification-badge: #dc3545;
        --transition-time: 0.3s;
    }

    /* Reset básico */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,
            Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        line-height: 1.5;
        color: var(--text-color);
    }

    /* Header y Contenedor */
    .header {
        background: #ffffff;
        box-shadow: var(--shadow);
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        z-index: 1000;
    }

    .header__container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0.5rem 1rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    /* Logo */
    .header__logo .logo__img {
        height: 40px;
        width: auto;
    }

    /* Navegación */
    .nav__list {
        display: flex;
        gap: 1.5rem;
        list-style: none;
    }

    .nav__link {
        color: var(--text-color);
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem;
        transition: color var(--transition-time) ease;
    }

    .nav__link:hover {
        color: var(--primary-color);
    }

    /* Área de Usuario */
    .header__user {
        display: flex;
        align-items: center;
        gap: 1rem;
        position: relative;
    }

    /* Notificaciones */
    .notification__item {
        padding: 12px;
        border-bottom: 1px solid var(--border-color);
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .notification__item:hover {
        background-color: var(--hover-bg);
    }

    .notification__content {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    .notification__content a {
        text-decoration: none;
        color: inherit;
        display: block;
        padding: 8px;
        border-radius: 4px;
    }

    .notifications__btn {
        background: none;
        border: none;
        padding: 8px;
        cursor: pointer;
        position: relative;
    }

    .notifications__badge {
        position: absolute;
        top: -5px;
        right: -5px;
        background: var(--notification-badge);
        color: white;
        border-radius: 50%;
        padding: 4px 8px;
        font-size: 0.75rem;
        animation: pulse 2s infinite;
    }

    /* Dropdowns */
    .notifications__dropdown,
    .user-profile__dropdown {
        position: absolute;
        top: 100%;
        right: 0;
        background: white;
        border-radius: 8px;
        box-shadow: var(--shadow);
        min-width: 250px;
        display: none;
        margin-top: 10px;
        z-index: 1001;
    }

    .notifications__header {
        padding: 15px;
        border-bottom: 1px solid var(--border-color);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .notifications__list {
        max-height: 300px;
        overflow-y: auto;
        padding: 10px;
    }

    .dropdown__link {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 12px 15px;
        color: var(--text-color);
        text-decoration: none;
        transition: background-color var(--transition-time) ease;
    }

    .dropdown__link:hover {
        background-color: var(--hover-bg);
    }

    /* Animaciones */
    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes pulse {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.1);
        }

        100% {
            transform: scale(1);
        }
    }

    /* Estados */
    .show {
        display: block !important;
        animation: fadeIn var(--transition-time) ease;
    }

    /* Media Queries */
    @media screen and (max-width: 768px) {
        .header__container {
            padding: 0.5rem;
        }

        .nav__link span {
            display: none;
        }

        .notifications__dropdown {
            position: fixed;
            top: auto;
            bottom: 0;
            left: 0;
            right: 0;
            width: 100%;
            max-height: 80vh;
            margin: 0;
            border-radius: 12px 12px 0 0;
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
            z-index: 1002;
            background: white;
            overflow-y: auto;
            -webkit-overflow-scrolling: touch;
        }

        .notifications__dropdown,
        .user-profile__dropdown {
            position: fixed;
            top: auto;
            bottom: 0;
            left: 0;
            right: 0;
            width: 100%;
            max-height: 80vh;
            margin: 0;
            border-radius: 12px 12px 0 0;
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
        }

        .dropdown-backdrop {
            opacity: 0;
            transition: opacity var(--transition-time) ease;
        }

        .dropdown-backdrop.show {
            opacity: 1;
        }

        /* Prevenir scroll del body cuando el dropdown está abierto */
        body.dropdown-open {
            overflow: hidden;
            position: fixed;
            width: 100%;
        }


        .notifications__list {
            position: relative;
            z-index: 1003;
            max-height: 60vh;
            overflow-y: auto;
        }

        .notification__item {
            position: relative;
            z-index: 1004;
            padding: 0;
            margin: 0;
        }

        .notification__content {
            padding: 16px;
        }

        .notification__content a {
            display: block;
            width: 100%;
            padding: 0;
            margin: 0;
            position: relative;
            z-index: 1005;
        }

        /* Efecto táctil */
        .notification__item:active {
            background-color: var(--hover-bg);
        }

        .notification__inner {
            display: flex;
            align-items: flex-start;
            gap: 12px;
            padding: 16px;
        }

        .notification__details {
            flex: 1;
        }

        .notification__item:active {
            background-color: var(--hover-bg);
        }

        /* Indicador de deslizamiento */
        .notifications__header::after {
            content: '';
            display: block;
            width: 40px;
            height: 4px;
            background: var(--border-color);
            border-radius: 2px;
            margin: 8px auto 0;
        }

        .notification-link {
            -webkit-tap-highlight-color: transparent;
            touch-action: manipulation;
            user-select: none;
            display: block;
            width: 100%;
            padding: 16px;
            position: relative;
            z-index: 1005;
        }


        .notification__item {
            transition: background-color 0.2s ease;
        }

        .notification__item:active {
            background-color: var(--hover-bg);
        }

        /* Prevenir selección de texto */
        .notifications__dropdown {
            user-select: none;
            -webkit-user-select: none;
        }

        /* Asegurar que el scroll funcione suavemente */
        .notifications__list {
            -webkit-overflow-scrolling: touch;
            scroll-behavior: smooth;
        }

    }

    /* Agregar al final del bloque de estilos */
    .error-toast {
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: var(--notification-badge);
        color: white;
        padding: 12px 24px;
        border-radius: 4px;
        z-index: 2000;
        animation: fadeIn 0.3s ease;
    }

    /* Estados de notificación */
    .notification--read {
        opacity: 0.7;
        background-color: var(--hover-bg);
    }

    .notification--read .notification__text {
        color: var(--text-color);
        font-weight: normal;
    }

    .notifications__dropdown.swiping {
        transition: transform 0.2s ease;
        transform: translateY(var(--swipe-distance, 0px));
    }

    /* Indicador visual de swipe */
    .notifications__header::after {
        content: '';
        display: block;
        width: 40px;
        height: 4px;
        background: var(--border-color);
        border-radius: 2px;
        margin: 8px auto 0;
        transition: opacity 0.2s ease;
    }

    .notifications__dropdown.swiping .notifications__header::after {
        opacity: 0.5;
    }
</style>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Configuración
        const CONFIG = {
            MOBILE_BREAKPOINT: 768,
            SWIPE_THRESHOLD: 50,
            ANIMATION_DURATION: 300
        };
        // Definir handlers globalmente primero
        const handlers = {
            closeAll: () => {
                elements.notifDropdown?.classList.remove('show');
                elements.userDropdown?.classList.remove('show');
                elements.backdrop?.classList.remove('show');
                elements.body.style.overflow = '';
            },

            toggle: (dropdown) => {
                if (!dropdown) return;
                const isOpen = dropdown.classList.contains('show');
                handlers.closeAll();
                if (!isOpen) {
                    dropdown.classList.add('show');
                    elements.backdrop.classList.add('show');
                    elements.body.style.overflow = 'hidden';
                }
            },

            clearNotifications: () => {
                if (elements.notifList) {
                    elements.notifList.innerHTML = '';
                    elements.notifCount.textContent = '0';
                }
            }
        }
        // Elementos DOM
        const elements = {
            notifBtn: document.getElementById('notifBtn'),
            notifDropdown: document.getElementById('notifDropdown'),
            userProfileBtn: document.querySelector('.user-profile__btn'),
            userDropdown: document.getElementById('userDropdown'),
            notifCount: document.getElementById('notifCount'),
            notifList: document.getElementById('notifList'),
            clearNotifBtn: document.querySelector('.notifications__clear'),
            backdrop: document.getElementById('dropdownBackdrop'),
            body: document.body
        };
        const touchUtils = {
            startY: 0,
            startX: 0,
            moved: false,
            startTime: 0,

            handleTouchStart: (e) => {
                touchUtils.startY = e.touches[0].clientY;
                touchUtils.startX = e.touches[0].clientX;
                touchUtils.moved = false;
                touchUtils.startTime = Date.now();
            },
            handleTouchMove: (e) => {
                if (!touchUtils.startTime) return;

                const currentY = e.touches[0].clientY;
                const currentX = e.touches[0].clientX;

                const deltaY = currentY - touchUtils.startY;
                const deltaX = Math.abs(currentX - touchUtils.startX);

                // Solo permitir swipe down si estamos en la parte superior de la lista
                const notifList = elements.notifList;
                const isAtTop = notifList ? notifList.scrollTop <= 0 : false;

                // Si el movimiento es vertical hacia abajo y estamos en la parte superior
                if (deltaY > CONFIG.SWIPE_THRESHOLD && deltaX < 30 && isAtTop) {
                    // Añadir clase para efecto visual
                    elements.notifDropdown?.classList.add('swiping');

                    // Si el swipe es lo suficientemente largo, cerrar
                    if (deltaY > CONFIG.SWIPE_THRESHOLD * 2) {
                        handlers.closeAll();
                        touchUtils.startTime = 0;
                    }

                    e.preventDefault(); // Prevenir scroll
                }
            },

            handleTouchEnd: (e) => {
                const target = e.target.closest('a');
                if (!target) return;

                const timeDiff = Date.now() - touchUtils.startTime;
                elements.notifDropdown?.classList.remove('swiping');
                // Si no hubo movimiento significativo y el tiempo fue menor a 300ms, es un tap
                if (!touchUtils.moved && timeDiff < 300) {
                    e.preventDefault();
                    e.stopPropagation();

                    const notifItem = target.closest('.notification__item');
                    if (notifItem) {
                        const id = notifItem.dataset.id;
                        actualizarEstadoNotificacion(id).then(() => {
                            window.location.href = target.href;
                        }).catch(error => {
                            console.error('Error:', error);
                        });
                    }
                }

                // Reseteamos los valores
                touchUtils.startY = 0;
                touchUtils.startX = 0;
                touchUtils.moved = false;
                touchUtils.startTime = 0;
            }
        };
        // Utilidades
        const utils = {
            isMobile: () => window.innerWidth <= CONFIG.MOBILE_BREAKPOINT,

            debounce: (func, wait) => {
                let timeout;
                return (...args) => {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func(...args), wait);
                };
            },

            // Corregir la sintaxis aquí - eliminar utils.
            createNotification: (message, idSolicitud, id, time = new Date()) => {
                const notifId = `notif-${id}`;
                const formattedTime = new Date(time).toLocaleString('es-ES', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });

                return `
        <div class="notification__item" data-id="${idSolicitud}">
            <div class="notification__content">
                <a href="/protected/notificacion/${idSolicitud}" 
                   id="${notifId}"
                   rel="noopener noreferrer"
                   role="button"
                   class="notification-link">
                    <div class="notification__inner">
                        <i class="fas fa-bell"></i>
                        <div class="notification__details">
                            <p class="notification__text">${message}</p>
                            <span class="notification__time">${formattedTime}</span>
                        </div>
                    </div>
                </a>
            </div>
        </div>
    `;
            },
            addNotificationListener: (id) => {
                const notifLink = document.getElementById(`notif-${id}`);
                if (notifLink) {
                    notifLink.addEventListener('click', async (e) => {
                        e.preventDefault();
                        try {
                            await actualizarEstadoNotificacion(id);
                            window.location.href = notifLink.href;
                        } catch (error) {
                            console.error('Error al actualizar notificación:', error);
                        }
                    });
                }
            }
        };

        const initializeMobileEvents = () => {
            if (utils.isMobile() && elements.notifList) {
                elements.notifList.addEventListener('touchstart', touchUtils.handleTouchStart, { passive: true });
                elements.notifList.addEventListener('touchmove', touchUtils.handleTouchMove, { passive: true });
                elements.notifList.addEventListener('touchend', touchUtils.handleTouchEnd);
                elements.notifList.addEventListener('scroll', debouncedScroll, { passive: true });
            }
        };

        // Llamar después de initializeEventListeners
        initializeMobileEvents();

        // Modificar initializeEventListeners para usar los handlers globales
        const initializeEventListeners = () => {
            // Cambiar 'handlers' por 'eventHandlers'
            const eventHandlers = {
                notifBtnClick: (e) => {
                    e.stopPropagation();
                    handlers.toggle(elements.notifDropdown);
                },
                userProfileBtnClick: (e) => {
                    e.stopPropagation();
                    handlers.toggle(elements.userDropdown);
                }
            };

            // Asignar event listeners usando los handlers correctos
            elements.notifBtn?.addEventListener('click', eventHandlers.notifBtnClick);
            elements.userProfileBtn?.addEventListener('click', eventHandlers.userProfileBtnClick);
            elements.backdrop?.addEventListener('click', (e) => {
                if (e.target === elements.backdrop) {
                    e.preventDefault();
                    e.stopPropagation();
                    handlers.closeAll();
                }
            });

            document.addEventListener('click', (e) => {
                if (utils.isMobile()) return;

                const isNotificationClick = e.target.closest('.notifications');
                const isUserProfileClick = e.target.closest('.user-profile');
                const isBackdropClick = e.target.closest('.dropdown-backdrop');

                if (!isNotificationClick && !isUserProfileClick && !isBackdropClick) {
                    handlers.closeAll();
                }
            });

            // Eventos de ventana
            window.addEventListener('resize', utils.debounce(handlers.closeAll, 150));
            window.addEventListener('orientationchange', handlers.closeAll);

            return eventHandlers;
        };
        // Inicializar
        const eventHandlers = initializeEventListeners();
        // Cleanup de eventos cuando el componente se desmonta
        const cleanup = () => {
            // Remover eventos móviles
            if (utils.isMobile()) {
                const notifList = elements.notifList;
                if (notifList) {
                    // Remover todos los event listeners
                    const eventListeners = [
                        { event: 'touchmove', handler: touchUtils.handleTouchMove },
                        { event: 'touchstart', handler: touchUtils.handleTouchStart },
                        { event: 'touchend', handler: touchUtils.handleTouchEnd },
                        { event: 'click', handler: handlers.clearNotifications }
                    ];

                    eventListeners.forEach(({ event, handler }) => {
                        notifList.removeEventListener(event, handler);
                    });
                }
            }

            // Remover eventos globales con referencia guardada
            const debouncedResize = utils.debounce(handlers.closeAll, 150);
            window.removeEventListener('resize', debouncedResize);
            window.removeEventListener('orientationchange', handlers.closeAll);

            // Remover eventos de click
            elements.notifBtn?.removeEventListener('click', handlers.notifBtnClick);
            elements.userProfileBtn?.removeEventListener('click', handlers.userProfileBtnClick);
            elements.backdrop?.removeEventListener('click', handlers.closeAll);
            elements.clearNotifBtn?.removeEventListener('click', handlers.clearNotifications);
        };
        // Agregar el cleanup al window para poder llamarlo cuando sea necesario
        window.addEventListener('unload', cleanup);

        // Ejemplo de uso
        window.addNotification = (message, id_solicitud, id) => {
            if (elements.notifList) {
                elements.notifList.insertAdjacentHTML('afterbegin',
                    utils.createNotification(message, id_solicitud, id)
                );
                utils.addNotificationListener(id);
                elements.notifCount.textContent =
                    (parseInt(elements.notifCount.textContent) + 1).toString();
            }
        };


        //obtenemos las notificaciones del usuario
        const obtenerNotificaciones = async () => {
            try {
                const response = await fetch('/api/notificaciones');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                return data;
            } catch (error) {
                console.error('Error fetching notificaciones:', error);
                throw error;
            }
        };

        obtenerNotificaciones().then((data) => {
            console.log(data);
            data.forEach((element) => {
                window.addNotification(element.mensaje, element.id_solicitud, element.id);
            });
        }).catch(error => {
            showError('Error al cargar las notificaciones');
        });

        const showError = (message) => {
            console.error(message);
            // Implementar toast o notificación visual
            const toast = document.createElement('div');
            toast.className = 'error-toast';
            toast.textContent = message;
            document.body.appendChild(toast);

            setTimeout(() => {
                toast.remove();
            }, 3000);
        };
        // funcion para notificacion igresar pagina y actulizar estado
        async function actualizarEstadoNotificacion(idSolicitud) {
            try {
                const response = await fetch(`/api/notificaciones/${idSolicitud}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error(`Error al actualizar: ${response.status}`);
                }

                const data = await response.json();

                // Actualizar UI
                const notifItem = document.querySelector(`[data-id="${idSolicitud}"]`);
                if (notifItem) {
                    notifItem.classList.add('notification--read');
                }

                return data;
            } catch (error) {
                showError('Error al actualizar la notificación');
                throw error;
            }
        }
        const debouncedScroll = utils.debounce(() => {
            const notifList = elements.notifList;
            if (notifList) {
                const isAtTop = notifList.scrollTop === 0;
                const isAtBottom = notifList.scrollHeight - notifList.scrollTop === notifList.clientHeight;

                if (isAtTop || isAtBottom) {
                    notifList.style.overscrollBehavior = 'auto';
                } else {
                    notifList.style.overscrollBehavior = 'contain';
                }
            }
        }, 100);
        const updateNotificationCount = (increment = true) => {
            const count = parseInt(elements.notifCount.textContent) || 0;
            const newCount = increment ? count + 1 : count - 1;
            elements.notifCount.textContent = Math.max(0, newCount).toString();
            elements.notifCount.style.display = newCount === 0 ? 'none' : 'block';
        };
    });
</script>